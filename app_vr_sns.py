import os

from dash import Dash, html, dash_table, dcc, callback, Output, Input
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px

fname = "SouthernNSea_vr.parquet"
fpath = os.path.join(os.path.expanduser('~'), 'Downloads', fname)
df = pd.read_parquet(fpath)

target = 'VR Mean.Any'
features = df.columns.difference([target]).to_list()

# Identify float columns and round them to 2 decimal places
float_cols = df.select_dtypes(include=['float', 'float64']).columns
df[float_cols] = df[float_cols].round(2)

external_css = [dbc.themes.CERULEAN]
app = Dash(__name__, external_stylesheets=external_css)

# build components for dashboard
# add search bar
table = dash_table.DataTable(data=df.to_dict('records'), page_size=8, style_table={'overflowX': 'auto'}, sort_action='native')
feature_radio_ctrl = dbc.RadioItems(options=[{"label": x, "value": x} for x in features], 
                                    value=features[0], 
                                    id='features-radio-item',
                                    inline=True)
feat_vs_target_plot = dcc.Graph(id='target-by-feature-plot')  # figure generated by callback
lat_lon_density_map = dcc.Graph(figure=px.density_heatmap(df, x='Long.Any', y='Lat.Any', 
                                                          nbinsx=12, nbinsy=12, 
                                                          color_continuous_scale=px.colors.carto.Darkmint))

# define layout
app.layout = dbc.Container([
    dbc.Row([html.Div(f"{fname} data", className="text-primary text-center fs-3")]),
    dbc.Row([table]),
    dbc.Row([feature_radio_ctrl]),
    dbc.Row([
        dbc.Col([feat_vs_target_plot], width=6),
        dbc.Col([lat_lon_density_map], width=6)
    ])
], fluid=True)

@callback(
    Output(component_id='target-by-feature-plot', component_property='figure'),
    Input(component_id='features-radio-item', component_property='value')
)
def update_graph(col):
    fig = px.scatter(df, x='VR Mean.Any', y=col)
    if col == 'Base MD.Sample':
        fig.update_yaxes(autorange='reversed')
    return fig

if __name__ == "__main__":
    app.run_server(debug=True)
    #app.run_server(debug=True, port=8050)